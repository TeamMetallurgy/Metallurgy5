buildscript {
    repositories {
        mavenLocal()
        maven {
            name = 'Forge'
            url = 'https://files.minecraftforge.net/maven'
        }

        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
import groovy.json.JsonSlurper
import groovy.json.JsonOutput
allprojects {
    apply plugin: 'net.minecraftforge.gradle'

    sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

    minecraft {
        mappings channel: 'snapshot', version: project.mappings_version + "-" + "1.14.3"
    }

    dependencies {
        minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    }

    processResources {
        // Minifies all .json files when building the mod.
        // Source files are not minified, only the jar copies.
        doLast {

            def jsonMinifyStart = System.currentTimeMillis()
            def jsonMinified = 0
            def jsonBytesSaved = 0

            fileTree(dir: outputs.files.asPath, include: '**/*.json').each {

                File file = it
                jsonMinified++
                def oldLength = file.length()
                file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
                jsonBytesSaved += oldLength - file.length()
            }

            println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
        }
    }
}

minecraft {
    runs {
        client {
            ideaModule "${project.name}.main"
            workingDirectory project.file('run')

            mods {
                Metallurgy5Core {
                    sources sourceSets.main
                }
            }
        }

        clientAllMods {
            parent runs.client

            project.subprojects.forEach { subProject ->
                child subProject.path, 'client'
            }
        }
    }
}

subprojects {
    version = "${minecraft_version}-${mod_version}" + getBuildNumber()
    minecraft {
        runs {
            client {
                parent rootProject.path, 'client'
                ideaModule "${rootProject.name}.${project.name}.main"
                workingDirectory project.file('run')
                mods {
                    "${project.name}" {
                        sources sourceSets.main
                    }
                }
            }
        }
    }
}


String getBuildNumber() {
    return System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : '0';
}